import asyncio
import signal

import uvicorn
import logging

from app.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def start_bot():
    """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    try:
        from app.bot.main import start_bot as bot_start
        await bot_start()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


async def start_updater():
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤"""
    try:
        from app.services.updater import TrackUpdater
        updater = TrackUpdater()
        await updater.start()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä–∞: {e}")


async def start_api():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        from main import app
        config = uvicorn.Config(
            app,
            host=settings.API_HOST,
            port=settings.API_PORT,
            log_level="info" if settings.DEBUG else "warning"
        )
        server = uvicorn.Server(config)

        # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
        server.install_signal_handlers = lambda: None

        await server.serve()

    except asyncio.CancelledError:
        logger.info("üõë API —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API: {e}")
        raise


async def graceful_shutdown(tasks, timeout=10):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    logger.info("üõë –ù–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")

    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
    try:
        from app.bot.main import on_shutdown as stop_bot
        await stop_bot()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

    # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    for task in tasks:
        if not task.done():
            task.cancel()

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        await asyncio.wait_for(
            asyncio.gather(*tasks, return_exceptions=True),
            timeout=timeout
        )
        logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except asyncio.TimeoutError:
        logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç {timeout}—Å –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á")
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        for task in tasks:
            if not task.done():
                task.cancel()
        # –î–∞–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await asyncio.gather(*tasks, return_exceptions=True)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Spotify Telegram Status...")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
    bot_task = asyncio.create_task(start_bot())
    updater_task = asyncio.create_task(start_updater())
    api_task = asyncio.create_task(start_api())

    tasks = [bot_task, updater_task, api_task]

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞
    stop_event = asyncio.Event()

    def shutdown():
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        stop_event.set()

    loop = asyncio.get_running_loop()
    loop.add_signal_handler(signal.SIGINT, shutdown)
    loop.add_signal_handler(signal.SIGTERM, shutdown)

    try:
        # –ñ–¥–µ–º –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–π –∑–∞–¥–∞—á–∏, –ª–∏–±–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        done, pending = await asyncio.wait(
            tasks + [asyncio.create_task(stop_event.wait())],
            return_when=asyncio.FIRST_COMPLETED
        )

        # –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ –æ–¥–Ω–∞ –∏–∑ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å
        await graceful_shutdown(tasks)

    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω KeyboardInterrupt")
        await graceful_shutdown(tasks)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await graceful_shutdown(tasks)
    finally:
        logger.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not settings.TG_BOT_TOKEN:
        logger.error("‚ùå TG_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)

    if not settings.SPOTIFY_CLIENT_ID:
        logger.error("‚ùå SPOTIFY_CLIENT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        exit(1)

    logger.info(f"üîß –†–µ–∂–∏–º: {'DEBUG' if settings.DEBUG else 'PRODUCTION'}")
    logger.info(f"üåê API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://{settings.API_HOST}:{settings.API_PORT}")
    logger.info(f"ü§ñ Telegram –±–æ—Ç: @{settings.TG_BOT_USERNAME}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    asyncio.run(main())
