import asyncio
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update

from app.config import settings
from app.database.connection import get_session
from app.database.models import User, Channel
from app.services.spotify import SpotifyService
from app.bot.utils.channel import ChannelManager

logger = logging.getLogger(__name__)


class TrackUpdater:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

    def __init__(self):
        self.spotify_service = SpotifyService()
        self.channel_manager = ChannelManager()
        self.update_interval = settings.UPDATE_INTERVAL
        self.is_running = False
        self._task = None
        self._stats = {
            'total_updates': 0,
            'successful_updates': 0,
            'failed_updates': 0,
            'last_update_time': None,
            'active_users': 0
        }

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if self.is_running:
            logger.warning("TrackUpdater —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        logger.info(f"üîÑ –ó–∞–ø—É—Å–∫ TrackUpdater (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.update_interval}—Å)")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self._run_update_loop()
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ TrackUpdater: {e}")
            self.is_running = False
            raise

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if not self.is_running:
            return

        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TrackUpdater...")
        self.is_running = False

        if self._task and not self._task.done():
            self._task.cancel()
            try:
                await self._task
            except asyncio.CancelledError:
                pass

        logger.info("‚úÖ TrackUpdater –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _run_update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        logger.info("üöÄ TrackUpdater –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

        while self.is_running:
            cycle_start = datetime.utcnow()

            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await self._update_cycle()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._stats['last_update_time'] = cycle_start

                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                execution_time = (datetime.utcnow() - cycle_start).total_seconds()

                if execution_time > self.update_interval:
                    logger.warning(
                        f"–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è–ª {execution_time:.2f}—Å (–±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ {self.update_interval}—Å)")
                else:
                    logger.debug(f"–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f}—Å")

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                sleep_time = max(0.5, self.update_interval - execution_time)
                await asyncio.sleep(sleep_time)

            except asyncio.CancelledError:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ TrackUpdater")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
                self._stats['failed_updates'] += 1

                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(min(30, self.update_interval))

        logger.info("TrackUpdater –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

    async def _update_cycle(self):
        """–û–¥–∏–Ω —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        async for db in get_session():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞–Ω–∞–ª–∞–º–∏
                users_data = await self._get_active_users(db)

                if not users_data:
                    logger.debug("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    return

                self._stats['active_users'] = len(users_data)
                logger.debug(f"–û–±–Ω–æ–≤–ª—è–µ–º {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                batch_size = 5  # –£–º–µ–Ω—å—à–∏–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

                for i in range(0, len(users_data), batch_size):
                    if not self.is_running:
                        break

                    batch = users_data[i:i + batch_size]

                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    tasks = []
                    for user_data in batch:
                        task = asyncio.create_task(
                            self._update_single_user(db, user_data)
                        )
                        tasks.append(task)

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    try:
                        await asyncio.wait_for(
                            asyncio.gather(*tasks, return_exceptions=True),
                            timeout=30.0  # –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–∞–∫–µ—Ç
                        )
                    except asyncio.TimeoutError:
                        logger.warning(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                        for task in tasks:
                            if not task.done():
                                task.cancel()

                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
                    if i + batch_size < len(users_data):
                        await asyncio.sleep(0.2)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", exc_info=True)
                raise

    async def _get_active_users(self, db: AsyncSession) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞–Ω–∞–ª–∞–º–∏

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–∞–Ω–∞–ª–æ–≤
        """
        try:
            result = await db.execute(
                select(
                    User.id,
                    User.telegram_id,
                    User.spotify_access_token,
                    User.spotify_refresh_token,
                    User.token_expires_at,
                    Channel.id.label('channel_id'),
                    Channel.channel_username,
                    Channel.last_track_id,
                    Channel.last_track_image_url,
                    Channel.last_message_id
                )
                .join(Channel, User.id == Channel.user_id)
                .where(
                    User.spotify_access_token.isnot(None),
                    Channel.channel_username.isnot(None)
                )
                .order_by(User.id)
            )

            users_data = []
            for row in result.fetchall():
                users_data.append({
                    'user_id': row.id,
                    'telegram_id': row.telegram_id,
                    'access_token': row.spotify_access_token,
                    'refresh_token': row.spotify_refresh_token,
                    'token_expires_at': row.token_expires_at,
                    'channel_id': row.channel_id,
                    'channel_username': row.channel_username,
                    'last_track_id': row.last_track_id,
                    'last_track_image_url': row.last_track_image_url,
                    'last_message_id': row.last_message_id
                })

            return users_data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    async def _update_single_user(self, db: AsyncSession, user_data: Dict[str, Any]):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–Ω–∞–ª–∞
        """
        telegram_id = user_data['telegram_id']
        channel_username = user_data['channel_username']

        try:
            self._stats['total_updates'] += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            access_token = await self._ensure_valid_token(db, user_data)
            if not access_token:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏–∑ Spotify
            current_track = await self._get_user_current_track(access_token, telegram_id)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª
            should_update = await self._should_update_channel(user_data, current_track)

            if should_update:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ Telegram
                success = await self._update_user_channel(
                    channel_username,
                    current_track,
                    user_data
                )

                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î
                    await self._save_channel_state(db, user_data, current_track)
                    self._stats['successful_updates'] += 1

                    track_name = current_track.get('name', '–ù–µ—Ç –º—É–∑—ã–∫–∏') if current_track else '–ù–µ—Ç –º—É–∑—ã–∫–∏'
                    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–∞–Ω–∞–ª @{channel_username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {track_name}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª @{channel_username} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            else:
                logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ @{channel_username} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è (—Ç—Ä–µ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è)")
                self._stats['successful_updates'] += 1

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            self._stats['failed_updates'] += 1

    async def _ensure_valid_token(self, db: AsyncSession, user_data: Dict[str, Any]) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –í–∞–ª–∏–¥–Ω—ã–π access_token –∏–ª–∏ None
        """
        access_token = user_data['access_token']
        token_expires_at = user_data['token_expires_at']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
        if token_expires_at and datetime.utcnow() < token_expires_at:
            return access_token

        # –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å
        refresh_token = user_data['refresh_token']
        if not refresh_token:
            logger.warning(f"–ù–µ—Ç refresh_token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['telegram_id']}")
            return None

        try:
            new_tokens = await self.spotify_service.refresh_access_token(refresh_token)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ –ë–î
            expires_at = datetime.utcnow() + timedelta(seconds=new_tokens['expires_in'])

            await db.execute(
                update(User)
                .where(User.id == user_data['user_id'])
                .values(
                    spotify_access_token=new_tokens['access_token'],
                    token_expires_at=expires_at,
                    updated_at=datetime.utcnow()
                )
            )
            await db.commit()

            logger.info(f"–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['telegram_id']}")
            return new_tokens['access_token']

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['telegram_id']}: {e}")
            return None

    async def _get_user_current_track(self, access_token: str, telegram_id: int) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Spotify

        Args:
            access_token: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ Spotify
            telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

        Returns:
            –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ None
        """
        try:
            track_data = await self.spotify_service.get_current_track(access_token)

            if track_data:
                parsed_track = self.spotify_service.parse_track_data(track_data)
                return parsed_track

            return None

        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –∏–∑ Spotify –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return None

    async def _should_update_channel(self, user_data: Dict[str, Any], current_track: Optional[Dict[str, Any]]) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞

        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–Ω–∞–ª–∞
            current_track: –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏–ª–∏ None

        Returns:
            True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª
        """
        last_track_id = user_data['last_track_id']
        current_track_id = current_track.get('id') if current_track else None

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏)
        if last_track_id is None:
            return True

        # –ï—Å–ª–∏ —Ç—Ä–µ–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è (–≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –º—É–∑—ã–∫–∏ –∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—é –º—É–∑—ã–∫–∏)
        if current_track_id != last_track_id:
            return True

        # –ï—Å–ª–∏ —Ç—Ä–µ–∫ —Ç–æ—Ç –∂–µ –∏ –∏–≥—Ä–∞–µ—Ç
        if current_track and current_track.get('is_playing'):
            return True

        return False

    async def _update_user_channel(
            self,
            channel_username: str,
            track_data: Optional[Dict[str, Any]],
            user_data: Dict[str, Any]
    ) -> bool:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram

        Args:
            channel_username: Username –∫–∞–Ω–∞–ª–∞
            track_data: –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ None
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            await self.channel_manager.update_channel_content(
                channel_username,
                user_data,
                track_data,
            )

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ @{channel_username}: {e}")
            return False

    async def _save_channel_state(
            self,
            db: AsyncSession,
            user_data: Dict[str, Any],
            track_data: Optional[Dict[str, Any]]
    ):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –ë–î

        Args:
            db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            track_data: –î–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ None
        """
        try:
            channel_id = user_data['channel_id']

            if track_data:
                await db.execute(
                    update(Channel)
                    .where(Channel.id == channel_id)
                    .values(
                        last_track_id=track_data.get('id'),
                        last_track_name=track_data.get('name'),
                        last_track_artist=track_data.get('artist'),
                        last_track_image_url=track_data.get('image_url'),
                        updated_at=datetime.utcnow()
                    )
                )
            else:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∞ –µ—Å–ª–∏ –º—É–∑—ã–∫–∞ –Ω–µ –∏–≥—Ä–∞–µ—Ç
                await db.execute(
                    update(Channel)
                    .where(Channel.id == channel_id)
                    .values(
                        last_track_id=None,
                        last_track_name=None,
                        last_track_artist=None,
                        last_track_image_url=None,
                        updated_at=datetime.utcnow()
                    )
                )

            await db.commit()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            await db.rollback()

    async def update_user_manually(self, telegram_id: int) -> bool:
        """
        –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞)

        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
        """
        async for db in get_session():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                result = await db.execute(
                    select(
                        User.id,
                        User.telegram_id,
                        User.spotify_access_token,
                        User.spotify_refresh_token,
                        User.token_expires_at,
                        Channel.id.label('channel_id'),
                        Channel.channel_username,
                        Channel.last_track_id,
                        Channel.last_track_image_url,
                        Channel.last_message_id
                    )
                    .join(Channel, User.id == Channel.user_id)
                    .where(User.telegram_id == telegram_id)
                )

                row = result.first()
                if not row:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∏–ª–∏ –µ–≥–æ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    return False

                user_data = {
                    'user_id': row.id,
                    'telegram_id': row.telegram_id,
                    'access_token': row.spotify_access_token,
                    'refresh_token': row.spotify_refresh_token,
                    'token_expires_at': row.token_expires_at,
                    'channel_id': row.channel_id,
                    'channel_username': row.channel_username,
                    'last_track_id': row.last_track_id,
                    'last_track_image_url': row.last_track_image_url,
                    'last_message_id': row.last_message_id
                }

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._update_single_user(db, user_data)
                return True

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
                return False

    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        return {
            'is_running': self.is_running,
            'update_interval': self.update_interval,
            'total_updates': self._stats['total_updates'],
            'successful_updates': self._stats['successful_updates'],
            'failed_updates': self._stats['failed_updates'],
            'success_rate': (
                    self._stats['successful_updates'] / max(1, self._stats['total_updates']) * 100
            ),
            'active_users': self._stats['active_users'],
            'last_update_time': self._stats['last_update_time'].isoformat() if self._stats[
                'last_update_time'] else None,
            'uptime_seconds': (datetime.utcnow() - self._stats['last_update_time']).total_seconds() if self._stats[
                'last_update_time'] else 0
        }

    async def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞

        Returns:
            –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        """
        last_update = self._stats['last_update_time']
        is_healthy = True
        issues = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
        if not self.is_running:
            is_healthy = False
            issues.append("Service is not running")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if last_update:
            time_since_update = (datetime.utcnow() - last_update).total_seconds()
            if time_since_update > self.update_interval * 3:  # –ë–æ–ª–µ–µ 3 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                is_healthy = False
                issues.append(f"No updates for {time_since_update:.0f} seconds")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        if self._stats['total_updates'] > 10:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            success_rate = self._stats['successful_updates'] / self._stats['total_updates'] * 100
            if success_rate < 80:  # –ú–µ–Ω–µ–µ 80% —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                is_healthy = False
                issues.append(f"Low success rate: {success_rate:.1f}%")

        return {
            'healthy': is_healthy,
            'issues': issues,
            'stats': self.get_stats()
        }