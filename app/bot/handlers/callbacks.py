import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import select

from app.bot.utils import esc, create_progress_text
from app.config import settings
from app.database.connection import get_session
from app.database.models import User, Channel
from app.services.spotify import SpotifyService

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    text = """
üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è*

*1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Spotify*
‚Ä¢ –ù–∞–∂–º–∏ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å Spotify"
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ

*2. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*
‚Ä¢ –°–æ–∑–¥–∞–π –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ Telegram
‚Ä¢ –î–æ–±–∞–≤—å –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∞ —Å –ø—Ä–∞–≤–∞–º–∏:
  - –ò–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–Ω–∞–ª–∞
  - –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å: /channel @—Ç–≤–æ–π_–∫–∞–Ω–∞–ª

*3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å*
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å > –ö–∞–Ω–∞–ª

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –ø–æ–¥–∫–ª—é—á–∏—Ç—å Spotify
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/current - —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
/channel @username - –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª
/disconnect - –æ—Ç–∫–ª—é—á–∏—Ç—å
    """

    await callback.message.edit_text(text)
    await callback.answer()


@router.callback_query(F.data == "current_track")
async def callback_current_track(callback: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
    user_id = callback.from_user.id

    async for db in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await db.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()

            if not user or not user.is_spotify_connected:
                await callback.answer("‚ùå Spotify –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", show_alert=True)
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
            spotify_service = SpotifyService()

            try:
                track_data = await spotify_service.get_current_track(user.spotify_access_token)

                if not track_data:
                    await callback.answer("‚è∏Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", show_alert=True)
                    return

                parsed_track = spotify_service.parse_track_data(track_data)

                if parsed_track and parsed_track['is_playing']:
                    text = create_progress_text(parsed_track)

                    await callback.message.edit_text(text)
                else:
                    await callback.answer("‚è∏Ô∏è –ù–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç", show_alert=True)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞", show_alert=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback current_track –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞", show_alert=True)


@router.callback_query(F.data == "settings")
async def callback_settings(callback: CallbackQuery):
    """Callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id

    async for db in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–Ω–∞–ª
            user_result = await db.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            channel_result = await db.execute(
                select(Channel).where(Channel.user_id == user.id)
            )
            channel = channel_result.scalar_one_or_none()

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞", callback_data="channel_settings")],
                [InlineKeyboardButton(text="üîå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="disconnect")],
                [InlineKeyboardButton(text="üìñ –ü–æ–º–æ—â—å", callback_data="help")]
            ])

            info = "‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            if channel:
                info = f"üéØ @{channel.channel_username}\nüìÖ {channel.created_at.strftime('%d.%m.%Y')}"

            text = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n{esc(info)}"

            await callback.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data == "channel_settings")
async def callback_channel_settings(callback: CallbackQuery):
    """Callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞"""
    user_id = callback.from_user.id

    async for db in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await db.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            channel_result = await db.execute(
                select(Channel).where(Channel.user_id == user.id)
            )
            channel = channel_result.scalar_one_or_none()

            if not channel:
                await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", show_alert=True)
                return

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="update_channel")],
                [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="create_channel_help")]
            ])

            text = f"""
‚öôÔ∏è *–ö–∞–Ω–∞–ª @{channel.channel_username}*

üìÖ –°–æ–∑–¥–∞–Ω: {channel.created_at.strftime('%d.%m.%Y')}
üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫
            """

            await callback.message.edit_text(text, reply_markup=keyboard)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback channel_settings –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞", show_alert=True)


@router.callback_query(F.data == "create_channel_help")
async def callback_create_channel_help(callback: CallbackQuery):
    """Callback –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–∞–Ω–∞–ª–∞"""
    text = f"""
üìö *–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*

*–®–∞–≥–∏:*
1. Telegram > –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª
2. –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª —Å @username
3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ > –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
4. –î–æ–±–∞–≤–∏—Ç—å @{settings.TG_BOT_USERNAME}
5. –ü—Ä–∞–≤–∞: –∏–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ñ–æ + —Å–æ–æ–±—â–µ–Ω–∏—è
6. –í –±–æ—Ç–µ: /channel @—Ç–≤–æ–π_–∫–∞–Ω–∞–ª

*–ü—Ä–æ—Ñ–∏–ª—å:*
–ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å > –ö–∞–Ω–∞–ª
    """

    await callback.message.edit_text(text)
    await callback.answer()


@router.callback_query(F.data == "update_channel")
async def callback_update_channel(callback: CallbackQuery):
    """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤—Ä—É—á–Ω—É—é"""
    user_id = callback.from_user.id

    async for db in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–Ω–∞–ª
            user_result = await db.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user_result.scalar_one_or_none()

            if not user or not user.is_spotify_connected:
                await callback.answer("‚ùå Spotify –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", show_alert=True)
                return

            channel_result = await db.execute(
                select(Channel).where(Channel.user_id == user.id)
            )
            channel = channel_result.scalar_one_or_none()

            if not channel:
                await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", show_alert=True)
                return

            try:
                from app.services.updater import TrackUpdater
                success = await TrackUpdater().update_user_manually(user_id)

                if success:
                    await callback.answer("‚úÖ –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω!", show_alert=True)
                else:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞", show_alert=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback update_channel –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "disconnect")
async def callback_disconnect(callback: CallbackQuery):
    """Callback –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Spotify"""
    user_id = callback.from_user.id

    async for db in get_session():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await db.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = result.scalar_one_or_none()

            if not user:
                await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            user.spotify_access_token = None
            user.spotify_refresh_token = None
            user.token_expires_at = None

            await db.commit()

            text = "üîå *Spotify –æ—Ç–∫–ª—é—á–µ–Ω*\n\n/start - –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ"
            await callback.message.edit_text(text)
            await callback.answer("Spotify –æ—Ç–∫–ª—é—á–µ–Ω")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Spotify –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è", show_alert=True)


@router.callback_query()
async def handle_unknown_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback queries"""
    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", show_alert=True)