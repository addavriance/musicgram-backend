import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.config import settings
from app.bot.handlers import commands, callbacks
from app.services.channel_service import service_router

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
bot = Bot(
    token=settings.TG_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# dp.message.middleware(AutoEscapeMiddleware(auto_escape=True, preserve_entities=True))
# dp.callback_query.middleware(AutoEscapeMiddleware(auto_escape=True, preserve_entities=True))

# –í–ê–ñ–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ü–ï–†–í–´–ú
dp.include_router(service_router)
dp.include_router(commands.router)
dp.include_router(callbacks.router)


async def on_startup():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info(f"ü§ñ Telegram –±–æ—Ç @{settings.TG_BOT_USERNAME} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    try:
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ –ë–æ—Ç {bot_info.first_name} (@{bot_info.username}) –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        raise

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    from aiogram.types import BotCommand
    commands = [
        BotCommand(command="start", description="üéµ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand(command="help", description="üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
        BotCommand(command="status", description="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"),
        BotCommand(command="current", description="üéß –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫"),
        BotCommand(command="channel", description="üîó –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
        BotCommand(command="disconnect", description="üîå –û—Ç–∫–ª—é—á–∏—Ç—å Spotify"),
    ]

    try:
        await bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")


async def on_shutdown():
    """–§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
    await bot.session.close()
    logger.info("üëã Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await on_startup()

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(
            bot,
            allowed_updates=["message", "callback_query", "channel_post"],
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            handle_signals=False
        )
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        raise
    finally:
        await on_shutdown()


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    asyncio.run(start_bot())